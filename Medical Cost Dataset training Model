{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": [],
      "authorship_tag": "ABX9TyOuQ0PHNhpu8/TtbRWWlvNx",
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/spoiledwit/Eventify/blob/main/Medical%20Cost%20Dataset%20training%20Model\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 2,
      "metadata": {
        "id": "3uhL6ao3jGjD"
      },
      "outputs": [],
      "source": [
        "#import required libs\n",
        "\n",
        "import tensorflow as tf\n",
        "import pandas as pd\n",
        "import matplotlib.pyplot as plt\n"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Read the insurance dataset\n",
        "insurance = pd.read_csv(\"https://raw.githubusercontent.com/stedy/Machine-Learning-with-R-datasets/master/insurance.csv\")"
      ],
      "metadata": {
        "id": "KTmShgqJjrKZ"
      },
      "execution_count": 3,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "insurance"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 424
        },
        "id": "P8cEKhynjzvG",
        "outputId": "ad8d2117-dfd7-41f9-a608-2ed47b06114f"
      },
      "execution_count": 4,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "      age     sex     bmi  children smoker     region      charges\n",
              "0      19  female  27.900         0    yes  southwest  16884.92400\n",
              "1      18    male  33.770         1     no  southeast   1725.55230\n",
              "2      28    male  33.000         3     no  southeast   4449.46200\n",
              "3      33    male  22.705         0     no  northwest  21984.47061\n",
              "4      32    male  28.880         0     no  northwest   3866.85520\n",
              "...   ...     ...     ...       ...    ...        ...          ...\n",
              "1333   50    male  30.970         3     no  northwest  10600.54830\n",
              "1334   18  female  31.920         0     no  northeast   2205.98080\n",
              "1335   18  female  36.850         0     no  southeast   1629.83350\n",
              "1336   21  female  25.800         0     no  southwest   2007.94500\n",
              "1337   61  female  29.070         0    yes  northwest  29141.36030\n",
              "\n",
              "[1338 rows x 7 columns]"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-30f49ea6-57ef-44d1-ae6c-18631e4c08fe\">\n",
              "    <div class=\"colab-df-container\">\n",
              "      <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>age</th>\n",
              "      <th>sex</th>\n",
              "      <th>bmi</th>\n",
              "      <th>children</th>\n",
              "      <th>smoker</th>\n",
              "      <th>region</th>\n",
              "      <th>charges</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>19</td>\n",
              "      <td>female</td>\n",
              "      <td>27.900</td>\n",
              "      <td>0</td>\n",
              "      <td>yes</td>\n",
              "      <td>southwest</td>\n",
              "      <td>16884.92400</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>18</td>\n",
              "      <td>male</td>\n",
              "      <td>33.770</td>\n",
              "      <td>1</td>\n",
              "      <td>no</td>\n",
              "      <td>southeast</td>\n",
              "      <td>1725.55230</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>28</td>\n",
              "      <td>male</td>\n",
              "      <td>33.000</td>\n",
              "      <td>3</td>\n",
              "      <td>no</td>\n",
              "      <td>southeast</td>\n",
              "      <td>4449.46200</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>33</td>\n",
              "      <td>male</td>\n",
              "      <td>22.705</td>\n",
              "      <td>0</td>\n",
              "      <td>no</td>\n",
              "      <td>northwest</td>\n",
              "      <td>21984.47061</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>32</td>\n",
              "      <td>male</td>\n",
              "      <td>28.880</td>\n",
              "      <td>0</td>\n",
              "      <td>no</td>\n",
              "      <td>northwest</td>\n",
              "      <td>3866.85520</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>...</th>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1333</th>\n",
              "      <td>50</td>\n",
              "      <td>male</td>\n",
              "      <td>30.970</td>\n",
              "      <td>3</td>\n",
              "      <td>no</td>\n",
              "      <td>northwest</td>\n",
              "      <td>10600.54830</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1334</th>\n",
              "      <td>18</td>\n",
              "      <td>female</td>\n",
              "      <td>31.920</td>\n",
              "      <td>0</td>\n",
              "      <td>no</td>\n",
              "      <td>northeast</td>\n",
              "      <td>2205.98080</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1335</th>\n",
              "      <td>18</td>\n",
              "      <td>female</td>\n",
              "      <td>36.850</td>\n",
              "      <td>0</td>\n",
              "      <td>no</td>\n",
              "      <td>southeast</td>\n",
              "      <td>1629.83350</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1336</th>\n",
              "      <td>21</td>\n",
              "      <td>female</td>\n",
              "      <td>25.800</td>\n",
              "      <td>0</td>\n",
              "      <td>no</td>\n",
              "      <td>southwest</td>\n",
              "      <td>2007.94500</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1337</th>\n",
              "      <td>61</td>\n",
              "      <td>female</td>\n",
              "      <td>29.070</td>\n",
              "      <td>0</td>\n",
              "      <td>yes</td>\n",
              "      <td>northwest</td>\n",
              "      <td>29141.36030</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>1338 rows Ã— 7 columns</p>\n",
              "</div>\n",
              "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-30f49ea6-57ef-44d1-ae6c-18631e4c08fe')\"\n",
              "              title=\"Convert this dataframe to an interactive table.\"\n",
              "              style=\"display:none;\">\n",
              "        \n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
              "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
              "  </svg>\n",
              "      </button>\n",
              "      \n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      flex-wrap:wrap;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "      <script>\n",
              "        const buttonEl =\n",
              "          document.querySelector('#df-30f49ea6-57ef-44d1-ae6c-18631e4c08fe button.colab-df-convert');\n",
              "        buttonEl.style.display =\n",
              "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "        async function convertToInteractive(key) {\n",
              "          const element = document.querySelector('#df-30f49ea6-57ef-44d1-ae6c-18631e4c08fe');\n",
              "          const dataTable =\n",
              "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                     [key], {});\n",
              "          if (!dataTable) return;\n",
              "\n",
              "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "            + ' to learn more about interactive tables.';\n",
              "          element.innerHTML = '';\n",
              "          dataTable['output_type'] = 'display_data';\n",
              "          await google.colab.output.renderOutput(dataTable, element);\n",
              "          const docLink = document.createElement('div');\n",
              "          docLink.innerHTML = docLinkHtml;\n",
              "          element.appendChild(docLink);\n",
              "        }\n",
              "      </script>\n",
              "    </div>\n",
              "  </div>\n",
              "  "
            ]
          },
          "metadata": {},
          "execution_count": 4
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Numerical encoding (one-hot encoding)\n",
        "insurance_one_hot = pd.get_dummies(insurance)"
      ],
      "metadata": {
        "id": "lN49K8djj0pJ"
      },
      "execution_count": 7,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "insurance_one_hot.head()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 270
        },
        "id": "1KICm0CaFwf_",
        "outputId": "27b43506-d99c-413f-f603-f94b9265b84c"
      },
      "execution_count": 8,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "   age     bmi  children      charges  sex_female  sex_male  smoker_no  \\\n",
              "0   19  27.900         0  16884.92400           1         0          0   \n",
              "1   18  33.770         1   1725.55230           0         1          1   \n",
              "2   28  33.000         3   4449.46200           0         1          1   \n",
              "3   33  22.705         0  21984.47061           0         1          1   \n",
              "4   32  28.880         0   3866.85520           0         1          1   \n",
              "\n",
              "   smoker_yes  region_northeast  region_northwest  region_southeast  \\\n",
              "0           1                 0                 0                 0   \n",
              "1           0                 0                 0                 1   \n",
              "2           0                 0                 0                 1   \n",
              "3           0                 0                 1                 0   \n",
              "4           0                 0                 1                 0   \n",
              "\n",
              "   region_southwest  \n",
              "0                 1  \n",
              "1                 0  \n",
              "2                 0  \n",
              "3                 0  \n",
              "4                 0  "
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-906c3706-5438-42fe-9694-811c7ea40c81\">\n",
              "    <div class=\"colab-df-container\">\n",
              "      <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>age</th>\n",
              "      <th>bmi</th>\n",
              "      <th>children</th>\n",
              "      <th>charges</th>\n",
              "      <th>sex_female</th>\n",
              "      <th>sex_male</th>\n",
              "      <th>smoker_no</th>\n",
              "      <th>smoker_yes</th>\n",
              "      <th>region_northeast</th>\n",
              "      <th>region_northwest</th>\n",
              "      <th>region_southeast</th>\n",
              "      <th>region_southwest</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>19</td>\n",
              "      <td>27.900</td>\n",
              "      <td>0</td>\n",
              "      <td>16884.92400</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>18</td>\n",
              "      <td>33.770</td>\n",
              "      <td>1</td>\n",
              "      <td>1725.55230</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>28</td>\n",
              "      <td>33.000</td>\n",
              "      <td>3</td>\n",
              "      <td>4449.46200</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>33</td>\n",
              "      <td>22.705</td>\n",
              "      <td>0</td>\n",
              "      <td>21984.47061</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>32</td>\n",
              "      <td>28.880</td>\n",
              "      <td>0</td>\n",
              "      <td>3866.85520</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-906c3706-5438-42fe-9694-811c7ea40c81')\"\n",
              "              title=\"Convert this dataframe to an interactive table.\"\n",
              "              style=\"display:none;\">\n",
              "        \n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
              "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
              "  </svg>\n",
              "      </button>\n",
              "      \n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      flex-wrap:wrap;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "      <script>\n",
              "        const buttonEl =\n",
              "          document.querySelector('#df-906c3706-5438-42fe-9694-811c7ea40c81 button.colab-df-convert');\n",
              "        buttonEl.style.display =\n",
              "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "        async function convertToInteractive(key) {\n",
              "          const element = document.querySelector('#df-906c3706-5438-42fe-9694-811c7ea40c81');\n",
              "          const dataTable =\n",
              "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                     [key], {});\n",
              "          if (!dataTable) return;\n",
              "\n",
              "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "            + ' to learn more about interactive tables.';\n",
              "          element.innerHTML = '';\n",
              "          dataTable['output_type'] = 'display_data';\n",
              "          await google.colab.output.renderOutput(dataTable, element);\n",
              "          const docLink = document.createElement('div');\n",
              "          docLink.innerHTML = docLinkHtml;\n",
              "          element.appendChild(docLink);\n",
              "        }\n",
              "      </script>\n",
              "    </div>\n",
              "  </div>\n",
              "  "
            ]
          },
          "metadata": {},
          "execution_count": 8
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Create X & Y values (features and labels)\n",
        "x = insurance_one_hot.drop(\"charges\", axis=1)\n",
        "y = insurance_one_hot[\"charges\"]"
      ],
      "metadata": {
        "id": "Rlcg9-sfGPRV"
      },
      "execution_count": 10,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# Create training and test sets\n",
        "from sklearn.model_selection import train_test_split\n",
        "X_train, X_test, Y_train, Y_test = train_test_split(x, y, test_size = 0.2, random_state = 42)"
      ],
      "metadata": {
        "id": "Z5fNT54fGtkx"
      },
      "execution_count": 15,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# Building a neural network:\n",
        "tf.random.set_seed(42)\n",
        "\n",
        "# create a model\n",
        "insurance_model = tf.keras.Sequential([\n",
        "    tf.keras.layers.Dense(10),\n",
        "    tf.keras.layers.Dense(1)\n",
        "])\n",
        "\n",
        "# Compile the model\n",
        "insurance_model.compile(loss = tf.keras.losses.mae,\n",
        "                        optimizer =tf.keras.optimizers.SGD(),\n",
        "                        metrics=[\"mae\"])\n",
        "# Fit the model\n",
        "insurance_model.fit(X_train, Y_train, epochs=100)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "gjY5gBxhHtoO",
        "outputId": "7b46e6ce-ab26-46c7-b885-585da403bec9"
      },
      "execution_count": 31,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Epoch 1/100\n",
            "34/34 [==============================] - 0s 1ms/step - loss: 8689.5371 - mae: 8689.5371\n",
            "Epoch 2/100\n",
            "34/34 [==============================] - 0s 1ms/step - loss: 7881.5708 - mae: 7881.5708\n",
            "Epoch 3/100\n",
            "34/34 [==============================] - 0s 980us/step - loss: 7584.7695 - mae: 7584.7695\n",
            "Epoch 4/100\n",
            "34/34 [==============================] - 0s 1ms/step - loss: 7734.4595 - mae: 7734.4595\n",
            "Epoch 5/100\n",
            "34/34 [==============================] - 0s 888us/step - loss: 7691.7295 - mae: 7691.7295\n",
            "Epoch 6/100\n",
            "34/34 [==============================] - 0s 969us/step - loss: 7642.1279 - mae: 7642.1279\n",
            "Epoch 7/100\n",
            "34/34 [==============================] - 0s 935us/step - loss: 7513.8618 - mae: 7513.8618\n",
            "Epoch 8/100\n",
            "34/34 [==============================] - 0s 1ms/step - loss: 7761.6602 - mae: 7761.6602\n",
            "Epoch 9/100\n",
            "34/34 [==============================] - 0s 990us/step - loss: 7509.8657 - mae: 7509.8657\n",
            "Epoch 10/100\n",
            "34/34 [==============================] - 0s 904us/step - loss: 7650.4766 - mae: 7650.4766\n",
            "Epoch 11/100\n",
            "34/34 [==============================] - 0s 1ms/step - loss: 7605.9688 - mae: 7605.9688\n",
            "Epoch 12/100\n",
            "34/34 [==============================] - 0s 1ms/step - loss: 7671.6689 - mae: 7671.6689\n",
            "Epoch 13/100\n",
            "34/34 [==============================] - 0s 950us/step - loss: 7641.3799 - mae: 7641.3799\n",
            "Epoch 14/100\n",
            "34/34 [==============================] - 0s 994us/step - loss: 7746.7563 - mae: 7746.7563\n",
            "Epoch 15/100\n",
            "34/34 [==============================] - 0s 1ms/step - loss: 7405.7529 - mae: 7405.7529\n",
            "Epoch 16/100\n",
            "34/34 [==============================] - 0s 1ms/step - loss: 7767.3579 - mae: 7767.3579\n",
            "Epoch 17/100\n",
            "34/34 [==============================] - 0s 957us/step - loss: 7496.3267 - mae: 7496.3267\n",
            "Epoch 18/100\n",
            "34/34 [==============================] - 0s 948us/step - loss: 7814.7246 - mae: 7814.7246\n",
            "Epoch 19/100\n",
            "34/34 [==============================] - 0s 973us/step - loss: 7537.2144 - mae: 7537.2144\n",
            "Epoch 20/100\n",
            "34/34 [==============================] - 0s 917us/step - loss: 7958.2466 - mae: 7958.2466\n",
            "Epoch 21/100\n",
            "34/34 [==============================] - 0s 1ms/step - loss: 7505.5801 - mae: 7505.5801\n",
            "Epoch 22/100\n",
            "34/34 [==============================] - 0s 978us/step - loss: 7890.9834 - mae: 7890.9834\n",
            "Epoch 23/100\n",
            "34/34 [==============================] - 0s 932us/step - loss: 7718.6982 - mae: 7718.6982\n",
            "Epoch 24/100\n",
            "34/34 [==============================] - 0s 1ms/step - loss: 7568.8975 - mae: 7568.8975\n",
            "Epoch 25/100\n",
            "34/34 [==============================] - 0s 973us/step - loss: 7532.3911 - mae: 7532.3911\n",
            "Epoch 26/100\n",
            "34/34 [==============================] - 0s 1ms/step - loss: 7640.9941 - mae: 7640.9941\n",
            "Epoch 27/100\n",
            "34/34 [==============================] - 0s 1ms/step - loss: 7706.7729 - mae: 7706.7729\n",
            "Epoch 28/100\n",
            "34/34 [==============================] - 0s 1ms/step - loss: 7407.5620 - mae: 7407.5620\n",
            "Epoch 29/100\n",
            "34/34 [==============================] - 0s 1ms/step - loss: 7690.9878 - mae: 7690.9878\n",
            "Epoch 30/100\n",
            "34/34 [==============================] - 0s 1ms/step - loss: 7694.3613 - mae: 7694.3613\n",
            "Epoch 31/100\n",
            "34/34 [==============================] - 0s 1ms/step - loss: 7530.1328 - mae: 7530.1328\n",
            "Epoch 32/100\n",
            "34/34 [==============================] - 0s 1ms/step - loss: 7513.8271 - mae: 7513.8271\n",
            "Epoch 33/100\n",
            "34/34 [==============================] - 0s 975us/step - loss: 7449.8354 - mae: 7449.8354\n",
            "Epoch 34/100\n",
            "34/34 [==============================] - 0s 991us/step - loss: 7347.6284 - mae: 7347.6284\n",
            "Epoch 35/100\n",
            "34/34 [==============================] - 0s 988us/step - loss: 7371.7144 - mae: 7371.7144\n",
            "Epoch 36/100\n",
            "34/34 [==============================] - 0s 1ms/step - loss: 7669.3047 - mae: 7669.3047\n",
            "Epoch 37/100\n",
            "34/34 [==============================] - 0s 1ms/step - loss: 7516.2153 - mae: 7516.2153\n",
            "Epoch 38/100\n",
            "34/34 [==============================] - 0s 940us/step - loss: 7367.8730 - mae: 7367.8730\n",
            "Epoch 39/100\n",
            "34/34 [==============================] - 0s 960us/step - loss: 7552.2607 - mae: 7552.2607\n",
            "Epoch 40/100\n",
            "34/34 [==============================] - 0s 969us/step - loss: 7206.4521 - mae: 7206.4521\n",
            "Epoch 41/100\n",
            "34/34 [==============================] - 0s 1ms/step - loss: 7753.8428 - mae: 7753.8428\n",
            "Epoch 42/100\n",
            "34/34 [==============================] - 0s 912us/step - loss: 7566.0923 - mae: 7566.0923\n",
            "Epoch 43/100\n",
            "34/34 [==============================] - 0s 910us/step - loss: 7715.6709 - mae: 7715.6709\n",
            "Epoch 44/100\n",
            "34/34 [==============================] - 0s 908us/step - loss: 7509.3809 - mae: 7509.3809\n",
            "Epoch 45/100\n",
            "34/34 [==============================] - 0s 953us/step - loss: 7510.2368 - mae: 7510.2368\n",
            "Epoch 46/100\n",
            "34/34 [==============================] - 0s 894us/step - loss: 7456.7393 - mae: 7456.7393\n",
            "Epoch 47/100\n",
            "34/34 [==============================] - 0s 1ms/step - loss: 7564.1123 - mae: 7564.1123\n",
            "Epoch 48/100\n",
            "34/34 [==============================] - 0s 929us/step - loss: 7537.5806 - mae: 7537.5806\n",
            "Epoch 49/100\n",
            "34/34 [==============================] - 0s 953us/step - loss: 7535.8765 - mae: 7535.8765\n",
            "Epoch 50/100\n",
            "34/34 [==============================] - 0s 942us/step - loss: 7466.5459 - mae: 7466.5459\n",
            "Epoch 51/100\n",
            "34/34 [==============================] - 0s 881us/step - loss: 7401.3179 - mae: 7401.3179\n",
            "Epoch 52/100\n",
            "34/34 [==============================] - 0s 990us/step - loss: 7427.5752 - mae: 7427.5752\n",
            "Epoch 53/100\n",
            "34/34 [==============================] - 0s 1ms/step - loss: 7513.4609 - mae: 7513.4609\n",
            "Epoch 54/100\n",
            "34/34 [==============================] - 0s 964us/step - loss: 7497.0366 - mae: 7497.0366\n",
            "Epoch 55/100\n",
            "34/34 [==============================] - 0s 975us/step - loss: 7356.9565 - mae: 7356.9565\n",
            "Epoch 56/100\n",
            "34/34 [==============================] - 0s 971us/step - loss: 7385.1050 - mae: 7385.1050\n",
            "Epoch 57/100\n",
            "34/34 [==============================] - 0s 973us/step - loss: 7355.2310 - mae: 7355.2310\n",
            "Epoch 58/100\n",
            "34/34 [==============================] - 0s 918us/step - loss: 7603.8320 - mae: 7603.8320\n",
            "Epoch 59/100\n",
            "34/34 [==============================] - 0s 1ms/step - loss: 7480.6416 - mae: 7480.6416\n",
            "Epoch 60/100\n",
            "34/34 [==============================] - 0s 974us/step - loss: 7391.6929 - mae: 7391.6929\n",
            "Epoch 61/100\n",
            "34/34 [==============================] - 0s 911us/step - loss: 7580.7979 - mae: 7580.7979\n",
            "Epoch 62/100\n",
            "34/34 [==============================] - 0s 954us/step - loss: 7412.7710 - mae: 7412.7710\n",
            "Epoch 63/100\n",
            "34/34 [==============================] - 0s 1000us/step - loss: 7447.4692 - mae: 7447.4692\n",
            "Epoch 64/100\n",
            "34/34 [==============================] - 0s 1ms/step - loss: 7302.6392 - mae: 7302.6392\n",
            "Epoch 65/100\n",
            "34/34 [==============================] - 0s 979us/step - loss: 7384.8213 - mae: 7384.8213\n",
            "Epoch 66/100\n",
            "34/34 [==============================] - 0s 1000us/step - loss: 7208.5620 - mae: 7208.5620\n",
            "Epoch 67/100\n",
            "34/34 [==============================] - 0s 990us/step - loss: 7494.5474 - mae: 7494.5474\n",
            "Epoch 68/100\n",
            "34/34 [==============================] - 0s 958us/step - loss: 7487.7769 - mae: 7487.7769\n",
            "Epoch 69/100\n",
            "34/34 [==============================] - 0s 1ms/step - loss: 7373.9736 - mae: 7373.9736\n",
            "Epoch 70/100\n",
            "34/34 [==============================] - 0s 1ms/step - loss: 7564.9414 - mae: 7564.9414\n",
            "Epoch 71/100\n",
            "34/34 [==============================] - 0s 1ms/step - loss: 7231.0684 - mae: 7231.0684\n",
            "Epoch 72/100\n",
            "34/34 [==============================] - 0s 959us/step - loss: 7362.6924 - mae: 7362.6924\n",
            "Epoch 73/100\n",
            "34/34 [==============================] - 0s 986us/step - loss: 7342.3867 - mae: 7342.3867\n",
            "Epoch 74/100\n",
            "34/34 [==============================] - 0s 993us/step - loss: 7522.4814 - mae: 7522.4814\n",
            "Epoch 75/100\n",
            "34/34 [==============================] - 0s 946us/step - loss: 7151.9639 - mae: 7151.9639\n",
            "Epoch 76/100\n",
            "34/34 [==============================] - 0s 1ms/step - loss: 7223.4629 - mae: 7223.4629\n",
            "Epoch 77/100\n",
            "34/34 [==============================] - 0s 1ms/step - loss: 7476.7344 - mae: 7476.7344\n",
            "Epoch 78/100\n",
            "34/34 [==============================] - 0s 1ms/step - loss: 7137.8159 - mae: 7137.8159\n",
            "Epoch 79/100\n",
            "34/34 [==============================] - 0s 1ms/step - loss: 7547.6743 - mae: 7547.6743\n",
            "Epoch 80/100\n",
            "34/34 [==============================] - 0s 1ms/step - loss: 7243.6006 - mae: 7243.6006\n",
            "Epoch 81/100\n",
            "34/34 [==============================] - 0s 1ms/step - loss: 7266.9443 - mae: 7266.9443\n",
            "Epoch 82/100\n",
            "34/34 [==============================] - 0s 1ms/step - loss: 7175.9414 - mae: 7175.9414\n",
            "Epoch 83/100\n",
            "34/34 [==============================] - 0s 1ms/step - loss: 7476.4868 - mae: 7476.4868\n",
            "Epoch 84/100\n",
            "34/34 [==============================] - 0s 961us/step - loss: 7374.8525 - mae: 7374.8525\n",
            "Epoch 85/100\n",
            "34/34 [==============================] - 0s 994us/step - loss: 7522.1797 - mae: 7522.1797\n",
            "Epoch 86/100\n",
            "34/34 [==============================] - 0s 1ms/step - loss: 7352.6587 - mae: 7352.6587\n",
            "Epoch 87/100\n",
            "34/34 [==============================] - 0s 985us/step - loss: 7404.1123 - mae: 7404.1123\n",
            "Epoch 88/100\n",
            "34/34 [==============================] - 0s 1ms/step - loss: 7368.9829 - mae: 7368.9829\n",
            "Epoch 89/100\n",
            "34/34 [==============================] - 0s 1ms/step - loss: 7489.4629 - mae: 7489.4629\n",
            "Epoch 90/100\n",
            "34/34 [==============================] - 0s 980us/step - loss: 7315.3101 - mae: 7315.3101\n",
            "Epoch 91/100\n",
            "34/34 [==============================] - 0s 1ms/step - loss: 7160.4624 - mae: 7160.4624\n",
            "Epoch 92/100\n",
            "34/34 [==============================] - 0s 1ms/step - loss: 7242.4531 - mae: 7242.4531\n",
            "Epoch 93/100\n",
            "34/34 [==============================] - 0s 927us/step - loss: 7510.3086 - mae: 7510.3086\n",
            "Epoch 94/100\n",
            "34/34 [==============================] - 0s 940us/step - loss: 7107.3467 - mae: 7107.3467\n",
            "Epoch 95/100\n",
            "34/34 [==============================] - 0s 1ms/step - loss: 7495.3022 - mae: 7495.3022\n",
            "Epoch 96/100\n",
            "34/34 [==============================] - 0s 979us/step - loss: 7263.1206 - mae: 7263.1206\n",
            "Epoch 97/100\n",
            "34/34 [==============================] - 0s 905us/step - loss: 7141.5698 - mae: 7141.5698\n",
            "Epoch 98/100\n",
            "34/34 [==============================] - 0s 1ms/step - loss: 7442.2305 - mae: 7442.2305\n",
            "Epoch 99/100\n",
            "34/34 [==============================] - 0s 1ms/step - loss: 7385.2891 - mae: 7385.2891\n",
            "Epoch 100/100\n",
            "34/34 [==============================] - 0s 964us/step - loss: 7247.2295 - mae: 7247.2295\n"
          ]
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<keras.callbacks.History at 0x7f1955ebfa00>"
            ]
          },
          "metadata": {},
          "execution_count": 31
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Check the results of the insurance_model on test data\n",
        "insurance_model.evaluate(X_test, Y_test)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "HaKnZrOwIqE7",
        "outputId": "19166755-a69c-4557-9947-477e76f738d9"
      },
      "execution_count": 39,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "9/9 [==============================] - 0s 1ms/step - loss: 7181.6055 - mae: 7181.6055\n"
          ]
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "[7181.60546875, 7181.60546875]"
            ]
          },
          "metadata": {},
          "execution_count": 39
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "Y_train.median(), Y_train.mean()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "IojCg7SZJmNn",
        "outputId": "8c4b7442-f452-4b4d-eae6-f92688889b0f"
      },
      "execution_count": 25,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "(9575.4421, 13346.089736364485)"
            ]
          },
          "metadata": {},
          "execution_count": 25
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "Model isn't performing well so let's improve the model"
      ],
      "metadata": {
        "id": "OOH9hI0sKApN"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# To (try) improve the model, doing:\n",
        "# 1- Adding an extra layer with more hidden unit, and the Adam optimizer\n",
        "# 2- Train for longer\n",
        "# 3- (other experiments)\n",
        "\n",
        "insurance_model_2 = tf.keras.Sequential([\n",
        "    tf.keras.layers.Dense(100),\n",
        "    tf.keras.layers.Dense(10),\n",
        "    tf.keras.layers.Dense(1)\n",
        "])\n",
        "\n",
        "insurance_model_2.compile(loss = tf.keras.losses.mae,\n",
        "                          optimizer = tf.keras.optimizers.Adam(),\n",
        "                          metrics=[\"mae\"])\n",
        "\n",
        "insurance_model_2.fit(X_train, Y_train, epochs = 100, verbose = 1)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "hXtU1OVhKF4F",
        "outputId": "2214351f-51c8-48a9-ccee-1a624b72e1ce"
      },
      "execution_count": 50,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Epoch 1/100\n",
            "34/34 [==============================] - 1s 1ms/step - loss: 13259.6416 - mae: 13259.6416\n",
            "Epoch 2/100\n",
            "34/34 [==============================] - 0s 1ms/step - loss: 13041.0615 - mae: 13041.0615\n",
            "Epoch 3/100\n",
            "34/34 [==============================] - 0s 1ms/step - loss: 12616.5547 - mae: 12616.5547\n",
            "Epoch 4/100\n",
            "34/34 [==============================] - 0s 1ms/step - loss: 11839.1260 - mae: 11839.1260\n",
            "Epoch 5/100\n",
            "34/34 [==============================] - 0s 1ms/step - loss: 10619.0654 - mae: 10619.0654\n",
            "Epoch 6/100\n",
            "34/34 [==============================] - 0s 1ms/step - loss: 9161.2109 - mae: 9161.2109\n",
            "Epoch 7/100\n",
            "34/34 [==============================] - 0s 1ms/step - loss: 7938.6904 - mae: 7938.6904\n",
            "Epoch 8/100\n",
            "34/34 [==============================] - 0s 1ms/step - loss: 7466.9976 - mae: 7466.9976\n",
            "Epoch 9/100\n",
            "34/34 [==============================] - 0s 1ms/step - loss: 7404.1006 - mae: 7404.1006\n",
            "Epoch 10/100\n",
            "34/34 [==============================] - 0s 1ms/step - loss: 7384.0093 - mae: 7384.0093\n",
            "Epoch 11/100\n",
            "34/34 [==============================] - 0s 1ms/step - loss: 7364.3794 - mae: 7364.3794\n",
            "Epoch 12/100\n",
            "34/34 [==============================] - 0s 1ms/step - loss: 7341.2944 - mae: 7341.2944\n",
            "Epoch 13/100\n",
            "34/34 [==============================] - 0s 1ms/step - loss: 7319.5879 - mae: 7319.5879\n",
            "Epoch 14/100\n",
            "34/34 [==============================] - 0s 1ms/step - loss: 7295.8501 - mae: 7295.8501\n",
            "Epoch 15/100\n",
            "34/34 [==============================] - 0s 1ms/step - loss: 7275.6147 - mae: 7275.6147\n",
            "Epoch 16/100\n",
            "34/34 [==============================] - 0s 1ms/step - loss: 7251.8403 - mae: 7251.8403\n",
            "Epoch 17/100\n",
            "34/34 [==============================] - 0s 1ms/step - loss: 7228.3447 - mae: 7228.3447\n",
            "Epoch 18/100\n",
            "34/34 [==============================] - 0s 1ms/step - loss: 7202.7139 - mae: 7202.7139\n",
            "Epoch 19/100\n",
            "34/34 [==============================] - 0s 1ms/step - loss: 7177.5571 - mae: 7177.5571\n",
            "Epoch 20/100\n",
            "34/34 [==============================] - 0s 1ms/step - loss: 7150.2324 - mae: 7150.2324\n",
            "Epoch 21/100\n",
            "34/34 [==============================] - 0s 1ms/step - loss: 7127.0996 - mae: 7127.0996\n",
            "Epoch 22/100\n",
            "34/34 [==============================] - 0s 1ms/step - loss: 7096.5547 - mae: 7096.5547\n",
            "Epoch 23/100\n",
            "34/34 [==============================] - 0s 1ms/step - loss: 7067.0708 - mae: 7067.0708\n",
            "Epoch 24/100\n",
            "34/34 [==============================] - 0s 1ms/step - loss: 7037.1250 - mae: 7037.1250\n",
            "Epoch 25/100\n",
            "34/34 [==============================] - 0s 1ms/step - loss: 7013.2192 - mae: 7013.2192\n",
            "Epoch 26/100\n",
            "34/34 [==============================] - 0s 1ms/step - loss: 6976.7920 - mae: 6976.7920\n",
            "Epoch 27/100\n",
            "34/34 [==============================] - 0s 1ms/step - loss: 6943.1162 - mae: 6943.1162\n",
            "Epoch 28/100\n",
            "34/34 [==============================] - 0s 1ms/step - loss: 6908.6030 - mae: 6908.6030\n",
            "Epoch 29/100\n",
            "34/34 [==============================] - 0s 1ms/step - loss: 6874.7983 - mae: 6874.7983\n",
            "Epoch 30/100\n",
            "34/34 [==============================] - 0s 1ms/step - loss: 6843.4248 - mae: 6843.4248\n",
            "Epoch 31/100\n",
            "34/34 [==============================] - 0s 1ms/step - loss: 6804.4258 - mae: 6804.4258\n",
            "Epoch 32/100\n",
            "34/34 [==============================] - 0s 1ms/step - loss: 6768.0493 - mae: 6768.0493\n",
            "Epoch 33/100\n",
            "34/34 [==============================] - 0s 1ms/step - loss: 6730.0078 - mae: 6730.0078\n",
            "Epoch 34/100\n",
            "34/34 [==============================] - 0s 1ms/step - loss: 6692.9946 - mae: 6692.9946\n",
            "Epoch 35/100\n",
            "34/34 [==============================] - 0s 1ms/step - loss: 6654.7554 - mae: 6654.7554\n",
            "Epoch 36/100\n",
            "34/34 [==============================] - 0s 1ms/step - loss: 6618.4634 - mae: 6618.4634\n",
            "Epoch 37/100\n",
            "34/34 [==============================] - 0s 1ms/step - loss: 6584.1992 - mae: 6584.1992\n",
            "Epoch 38/100\n",
            "34/34 [==============================] - 0s 2ms/step - loss: 6557.4590 - mae: 6557.4590\n",
            "Epoch 39/100\n",
            "34/34 [==============================] - 0s 1ms/step - loss: 6527.4624 - mae: 6527.4624\n",
            "Epoch 40/100\n",
            "34/34 [==============================] - 0s 1ms/step - loss: 6507.8340 - mae: 6507.8340\n",
            "Epoch 41/100\n",
            "34/34 [==============================] - 0s 1ms/step - loss: 6492.3003 - mae: 6492.3003\n",
            "Epoch 42/100\n",
            "34/34 [==============================] - 0s 1ms/step - loss: 6476.8540 - mae: 6476.8540\n",
            "Epoch 43/100\n",
            "34/34 [==============================] - 0s 1ms/step - loss: 6462.2427 - mae: 6462.2427\n",
            "Epoch 44/100\n",
            "34/34 [==============================] - 0s 1ms/step - loss: 6447.3315 - mae: 6447.3315\n",
            "Epoch 45/100\n",
            "34/34 [==============================] - 0s 1ms/step - loss: 6443.1362 - mae: 6443.1362\n",
            "Epoch 46/100\n",
            "34/34 [==============================] - 0s 1ms/step - loss: 6420.3740 - mae: 6420.3740\n",
            "Epoch 47/100\n",
            "34/34 [==============================] - 0s 1ms/step - loss: 6407.6431 - mae: 6407.6431\n",
            "Epoch 48/100\n",
            "34/34 [==============================] - 0s 1ms/step - loss: 6393.5522 - mae: 6393.5522\n",
            "Epoch 49/100\n",
            "34/34 [==============================] - 0s 1ms/step - loss: 6382.5420 - mae: 6382.5420\n",
            "Epoch 50/100\n",
            "34/34 [==============================] - 0s 1ms/step - loss: 6367.4199 - mae: 6367.4199\n",
            "Epoch 51/100\n",
            "34/34 [==============================] - 0s 1ms/step - loss: 6353.2188 - mae: 6353.2188\n",
            "Epoch 52/100\n",
            "34/34 [==============================] - 0s 1ms/step - loss: 6339.6182 - mae: 6339.6182\n",
            "Epoch 53/100\n",
            "34/34 [==============================] - 0s 1ms/step - loss: 6324.3188 - mae: 6324.3188\n",
            "Epoch 54/100\n",
            "34/34 [==============================] - 0s 1ms/step - loss: 6309.1128 - mae: 6309.1128\n",
            "Epoch 55/100\n",
            "34/34 [==============================] - 0s 1ms/step - loss: 6294.4868 - mae: 6294.4868\n",
            "Epoch 56/100\n",
            "34/34 [==============================] - 0s 1ms/step - loss: 6279.9409 - mae: 6279.9409\n",
            "Epoch 57/100\n",
            "34/34 [==============================] - 0s 1ms/step - loss: 6264.3965 - mae: 6264.3965\n",
            "Epoch 58/100\n",
            "34/34 [==============================] - 0s 1ms/step - loss: 6249.2144 - mae: 6249.2144\n",
            "Epoch 59/100\n",
            "34/34 [==============================] - 0s 1ms/step - loss: 6232.2837 - mae: 6232.2837\n",
            "Epoch 60/100\n",
            "34/34 [==============================] - 0s 1ms/step - loss: 6219.8687 - mae: 6219.8687\n",
            "Epoch 61/100\n",
            "34/34 [==============================] - 0s 1ms/step - loss: 6197.2939 - mae: 6197.2939\n",
            "Epoch 62/100\n",
            "34/34 [==============================] - 0s 1ms/step - loss: 6184.4854 - mae: 6184.4854\n",
            "Epoch 63/100\n",
            "34/34 [==============================] - 0s 1ms/step - loss: 6162.7007 - mae: 6162.7007\n",
            "Epoch 64/100\n",
            "34/34 [==============================] - 0s 1ms/step - loss: 6143.4985 - mae: 6143.4985\n",
            "Epoch 65/100\n",
            "34/34 [==============================] - 0s 1ms/step - loss: 6124.2949 - mae: 6124.2949\n",
            "Epoch 66/100\n",
            "34/34 [==============================] - 0s 1ms/step - loss: 6104.4189 - mae: 6104.4189\n",
            "Epoch 67/100\n",
            "34/34 [==============================] - 0s 1ms/step - loss: 6089.6016 - mae: 6089.6016\n",
            "Epoch 68/100\n",
            "34/34 [==============================] - 0s 1ms/step - loss: 6063.2788 - mae: 6063.2788\n",
            "Epoch 69/100\n",
            "34/34 [==============================] - 0s 1ms/step - loss: 6044.5200 - mae: 6044.5200\n",
            "Epoch 70/100\n",
            "34/34 [==============================] - 0s 1ms/step - loss: 6021.6382 - mae: 6021.6382\n",
            "Epoch 71/100\n",
            "34/34 [==============================] - 0s 1ms/step - loss: 5998.2764 - mae: 5998.2764\n",
            "Epoch 72/100\n",
            "34/34 [==============================] - 0s 1ms/step - loss: 5974.1406 - mae: 5974.1406\n",
            "Epoch 73/100\n",
            "34/34 [==============================] - 0s 1ms/step - loss: 5957.9292 - mae: 5957.9292\n",
            "Epoch 74/100\n",
            "34/34 [==============================] - 0s 1ms/step - loss: 5924.3789 - mae: 5924.3789\n",
            "Epoch 75/100\n",
            "34/34 [==============================] - 0s 1ms/step - loss: 5898.0444 - mae: 5898.0444\n",
            "Epoch 76/100\n",
            "34/34 [==============================] - 0s 1ms/step - loss: 5879.6714 - mae: 5879.6714\n",
            "Epoch 77/100\n",
            "34/34 [==============================] - 0s 1ms/step - loss: 5844.4702 - mae: 5844.4702\n",
            "Epoch 78/100\n",
            "34/34 [==============================] - 0s 1ms/step - loss: 5815.2324 - mae: 5815.2324\n",
            "Epoch 79/100\n",
            "34/34 [==============================] - 0s 1ms/step - loss: 5784.7051 - mae: 5784.7051\n",
            "Epoch 80/100\n",
            "34/34 [==============================] - 0s 1ms/step - loss: 5752.0278 - mae: 5752.0278\n",
            "Epoch 81/100\n",
            "34/34 [==============================] - 0s 1ms/step - loss: 5721.2876 - mae: 5721.2876\n",
            "Epoch 82/100\n",
            "34/34 [==============================] - 0s 1ms/step - loss: 5686.4570 - mae: 5686.4570\n",
            "Epoch 83/100\n",
            "34/34 [==============================] - 0s 1ms/step - loss: 5651.7739 - mae: 5651.7739\n",
            "Epoch 84/100\n",
            "34/34 [==============================] - 0s 1ms/step - loss: 5611.6533 - mae: 5611.6533\n",
            "Epoch 85/100\n",
            "34/34 [==============================] - 0s 1ms/step - loss: 5577.2544 - mae: 5577.2544\n",
            "Epoch 86/100\n",
            "34/34 [==============================] - 0s 1ms/step - loss: 5535.7402 - mae: 5535.7402\n",
            "Epoch 87/100\n",
            "34/34 [==============================] - 0s 1ms/step - loss: 5492.8086 - mae: 5492.8086\n",
            "Epoch 88/100\n",
            "34/34 [==============================] - 0s 1ms/step - loss: 5447.8789 - mae: 5447.8789\n",
            "Epoch 89/100\n",
            "34/34 [==============================] - 0s 1ms/step - loss: 5400.4155 - mae: 5400.4155\n",
            "Epoch 90/100\n",
            "34/34 [==============================] - 0s 1ms/step - loss: 5349.0840 - mae: 5349.0840\n",
            "Epoch 91/100\n",
            "34/34 [==============================] - 0s 1ms/step - loss: 5301.5117 - mae: 5301.5117\n",
            "Epoch 92/100\n",
            "34/34 [==============================] - 0s 1ms/step - loss: 5247.8423 - mae: 5247.8423\n",
            "Epoch 93/100\n",
            "34/34 [==============================] - 0s 1ms/step - loss: 5193.4390 - mae: 5193.4390\n",
            "Epoch 94/100\n",
            "34/34 [==============================] - 0s 1ms/step - loss: 5135.2988 - mae: 5135.2988\n",
            "Epoch 95/100\n",
            "34/34 [==============================] - 0s 1ms/step - loss: 5072.3335 - mae: 5072.3335\n",
            "Epoch 96/100\n",
            "34/34 [==============================] - 0s 2ms/step - loss: 5020.6279 - mae: 5020.6279\n",
            "Epoch 97/100\n",
            "34/34 [==============================] - 0s 1ms/step - loss: 4951.3257 - mae: 4951.3257\n",
            "Epoch 98/100\n",
            "34/34 [==============================] - 0s 1ms/step - loss: 4885.6738 - mae: 4885.6738\n",
            "Epoch 99/100\n",
            "34/34 [==============================] - 0s 1ms/step - loss: 4804.3291 - mae: 4804.3291\n",
            "Epoch 100/100\n",
            "34/34 [==============================] - 0s 1ms/step - loss: 4742.8442 - mae: 4742.8442\n"
          ]
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<keras.callbacks.History at 0x7f19561aed70>"
            ]
          },
          "metadata": {},
          "execution_count": 50
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Evaluating the larger model:\n",
        "insurance_model_2.evaluate(X_test, Y_test)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "dT3I4HwpLHwE",
        "outputId": "0aa4b5fc-4e71-451f-ff4d-b4e15a4d6ce5"
      },
      "execution_count": 35,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "9/9 [==============================] - 0s 2ms/step - loss: 4802.9268 - mae: 4802.9268\n"
          ]
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "[4802.9267578125, 4802.9267578125]"
            ]
          },
          "metadata": {},
          "execution_count": 35
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "tf.random.set_seed(42)\n",
        "\n",
        "\n",
        "insurance_model_3 = tf.keras.Sequential([\n",
        "    tf.keras.layers.Dense(100),\n",
        "    tf.keras.layers.Dense(10),\n",
        "    tf.keras.layers.Dense(1)\n",
        "])\n",
        "\n",
        "insurance_model_3.compile(loss = tf.keras.losses.mae,\n",
        "                          optimizer = tf.keras.optimizers.Adam(),\n",
        "                          metrics=[\"mae\"])\n",
        "\n",
        "history = insurance_model_3.fit(X_train, Y_train, epochs = 300, verbose = 0)"
      ],
      "metadata": {
        "id": "w3GzIPv2MEN9"
      },
      "execution_count": 54,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# Evaluating the larger model:\n",
        "insurance_model_3.evaluate(X_test, Y_test)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "6ARtq8TxMbq0",
        "outputId": "089921f5-2e84-4845-b470-ba95611fcfbb"
      },
      "execution_count": 52,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "9/9 [==============================] - 0s 2ms/step - loss: 3253.5618 - mae: 3253.5618\n"
          ]
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "[3253.561767578125, 3253.561767578125]"
            ]
          },
          "metadata": {},
          "execution_count": 52
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Plot history (also known as a loss curve or a training curve)\n",
        "pd.DataFrame(history.history).plot()\n",
        "plt.ylabel(\"loss\")\n",
        "plt.xlabel(\"epochs\")"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 466
        },
        "id": "LbUw6f1zMkOt",
        "outputId": "5a90f199-355e-40cc-8290-c59a46467f7d"
      },
      "execution_count": 53,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "Text(0.5, 0, 'epochs')"
            ]
          },
          "metadata": {},
          "execution_count": 53
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# model no. 4\n",
        "\n",
        "early_stopping = tf.keras.callbacks.EarlyStopping(monitor='loss', patience=20)\n",
        "\n",
        "insurance_model_4 = tf.keras.Sequential([\n",
        "    tf.keras.layers.Dense(100),\n",
        "    tf.keras.layers.Dense(10),\n",
        "    tf.keras.layers.Dense(1)\n",
        "])\n",
        "\n",
        "insurance_model_4.compile(loss = tf.keras.losses.mae,\n",
        "                          optimizer = tf.keras.optimizers.Adam(),\n",
        "                          metrics=[\"mae\"])\n",
        "\n",
        "history = insurance_model_4.fit(X_train, Y_train, epochs = 1000,\n",
        "                                verbose = 0, callbacks=[early_stopping])\n"
      ],
      "metadata": {
        "id": "n5rQK1MHNXd-"
      },
      "execution_count": 57,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# Plot history (also known as a loss curve or a training curve)\n",
        "pd.DataFrame(history.history).plot()\n",
        "plt.ylabel(\"loss\")\n",
        "plt.xlabel(\"epochs\")"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 466
        },
        "id": "mHVYYrtMQA37",
        "outputId": "0c41af35-1f81-4f88-987b-73c70016d046"
      },
      "execution_count": 58,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "Text(0.5, 0, 'epochs')"
            ]
          },
          "metadata": {},
          "execution_count": 58
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "Preprocessing data (Normalization and standarization):\n",
        "\n",
        "Let's do normalization."
      ],
      "metadata": {
        "id": "DTMYEEAqQuDY"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "import tensorflow as tf\n",
        "import pandas as pd\n",
        "import matplotlib.pyplot as plt\n",
        "\n",
        "# Read the insurance dataset\n",
        "insurance = pd.read_csv(\"https://raw.githubusercontent.com/stedy/Machine-Learning-with-R-datasets/master/insurance.csv\")"
      ],
      "metadata": {
        "id": "BzrlwYeBRk-X"
      },
      "execution_count": 60,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "insurance"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 424
        },
        "id": "ZPzHlFZfSn25",
        "outputId": "acd35fc4-9e81-4e0a-cde9-9c75b978aec4"
      },
      "execution_count": 61,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "      age     sex     bmi  children smoker     region      charges\n",
              "0      19  female  27.900         0    yes  southwest  16884.92400\n",
              "1      18    male  33.770         1     no  southeast   1725.55230\n",
              "2      28    male  33.000         3     no  southeast   4449.46200\n",
              "3      33    male  22.705         0     no  northwest  21984.47061\n",
              "4      32    male  28.880         0     no  northwest   3866.85520\n",
              "...   ...     ...     ...       ...    ...        ...          ...\n",
              "1333   50    male  30.970         3     no  northwest  10600.54830\n",
              "1334   18  female  31.920         0     no  northeast   2205.98080\n",
              "1335   18  female  36.850         0     no  southeast   1629.83350\n",
              "1336   21  female  25.800         0     no  southwest   2007.94500\n",
              "1337   61  female  29.070         0    yes  northwest  29141.36030\n",
              "\n",
              "[1338 rows x 7 columns]"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-f0b79d22-ca51-49bf-ac09-2eb813bbaca5\">\n",
              "    <div class=\"colab-df-container\">\n",
              "      <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>age</th>\n",
              "      <th>sex</th>\n",
              "      <th>bmi</th>\n",
              "      <th>children</th>\n",
              "      <th>smoker</th>\n",
              "      <th>region</th>\n",
              "      <th>charges</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>19</td>\n",
              "      <td>female</td>\n",
              "      <td>27.900</td>\n",
              "      <td>0</td>\n",
              "      <td>yes</td>\n",
              "      <td>southwest</td>\n",
              "      <td>16884.92400</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>18</td>\n",
              "      <td>male</td>\n",
              "      <td>33.770</td>\n",
              "      <td>1</td>\n",
              "      <td>no</td>\n",
              "      <td>southeast</td>\n",
              "      <td>1725.55230</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>28</td>\n",
              "      <td>male</td>\n",
              "      <td>33.000</td>\n",
              "      <td>3</td>\n",
              "      <td>no</td>\n",
              "      <td>southeast</td>\n",
              "      <td>4449.46200</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>33</td>\n",
              "      <td>male</td>\n",
              "      <td>22.705</td>\n",
              "      <td>0</td>\n",
              "      <td>no</td>\n",
              "      <td>northwest</td>\n",
              "      <td>21984.47061</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>32</td>\n",
              "      <td>male</td>\n",
              "      <td>28.880</td>\n",
              "      <td>0</td>\n",
              "      <td>no</td>\n",
              "      <td>northwest</td>\n",
              "      <td>3866.85520</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>...</th>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1333</th>\n",
              "      <td>50</td>\n",
              "      <td>male</td>\n",
              "      <td>30.970</td>\n",
              "      <td>3</td>\n",
              "      <td>no</td>\n",
              "      <td>northwest</td>\n",
              "      <td>10600.54830</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1334</th>\n",
              "      <td>18</td>\n",
              "      <td>female</td>\n",
              "      <td>31.920</td>\n",
              "      <td>0</td>\n",
              "      <td>no</td>\n",
              "      <td>northeast</td>\n",
              "      <td>2205.98080</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1335</th>\n",
              "      <td>18</td>\n",
              "      <td>female</td>\n",
              "      <td>36.850</td>\n",
              "      <td>0</td>\n",
              "      <td>no</td>\n",
              "      <td>southeast</td>\n",
              "      <td>1629.83350</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1336</th>\n",
              "      <td>21</td>\n",
              "      <td>female</td>\n",
              "      <td>25.800</td>\n",
              "      <td>0</td>\n",
              "      <td>no</td>\n",
              "      <td>southwest</td>\n",
              "      <td>2007.94500</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1337</th>\n",
              "      <td>61</td>\n",
              "      <td>female</td>\n",
              "      <td>29.070</td>\n",
              "      <td>0</td>\n",
              "      <td>yes</td>\n",
              "      <td>northwest</td>\n",
              "      <td>29141.36030</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>1338 rows Ã— 7 columns</p>\n",
              "</div>\n",
              "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-f0b79d22-ca51-49bf-ac09-2eb813bbaca5')\"\n",
              "              title=\"Convert this dataframe to an interactive table.\"\n",
              "              style=\"display:none;\">\n",
              "        \n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
              "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
              "  </svg>\n",
              "      </button>\n",
              "      \n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      flex-wrap:wrap;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "      <script>\n",
              "        const buttonEl =\n",
              "          document.querySelector('#df-f0b79d22-ca51-49bf-ac09-2eb813bbaca5 button.colab-df-convert');\n",
              "        buttonEl.style.display =\n",
              "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "        async function convertToInteractive(key) {\n",
              "          const element = document.querySelector('#df-f0b79d22-ca51-49bf-ac09-2eb813bbaca5');\n",
              "          const dataTable =\n",
              "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                     [key], {});\n",
              "          if (!dataTable) return;\n",
              "\n",
              "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "            + ' to learn more about interactive tables.';\n",
              "          element.innerHTML = '';\n",
              "          dataTable['output_type'] = 'display_data';\n",
              "          await google.colab.output.renderOutput(dataTable, element);\n",
              "          const docLink = document.createElement('div');\n",
              "          docLink.innerHTML = docLinkHtml;\n",
              "          element.appendChild(docLink);\n",
              "        }\n",
              "      </script>\n",
              "    </div>\n",
              "  </div>\n",
              "  "
            ]
          },
          "metadata": {},
          "execution_count": 61
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "from sklearn.compose import make_column_transformer\n",
        "from sklearn.preprocessing import MinMaxScaler, OneHotEncoder\n",
        "from sklearn.model_selection import train_test_split\n",
        "\n",
        "# Create a column transformer\n",
        "ct = make_column_transformer(\n",
        "    (MinMaxScaler(), [\"age\", \"bmi\", \"children\"]),\n",
        "    (OneHotEncoder(handle_unknown = \"ignore\"), [\"sex\", \"smoker\", \"region\"]))\n",
        "\n",
        "# Creating x and y values\n",
        "x = insurance.drop(\"charges\", axis=1)\n",
        "y = insurance[\"charges\"]\n",
        "\n",
        "# Creating train and test data\n",
        "X_train, X_test, Y_train, Y_test = train_test_split(x, y, test_size = 0.2, random_state = 42)"
      ],
      "metadata": {
        "id": "Nzh8lYM0So5Q"
      },
      "execution_count": 74,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# Fit the column transformer to the training data:\n",
        "ct.fit(X_train)\n",
        "\n",
        "# Transform training and test data with normalization\n",
        "X_train_normal = ct.transform(X_train)\n",
        "X_test_normal = ct.transform(X_test)"
      ],
      "metadata": {
        "id": "BKRpeOa6TI4r"
      },
      "execution_count": 75,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# what does it look like now:\n",
        "X_train.shape, X_train_normal.shape"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "MmDu_CUxU58B",
        "outputId": "1c8a11cb-33cd-49f9-d4b2-bb4448320fcb"
      },
      "execution_count": 76,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "((1070, 6), (1070, 11))"
            ]
          },
          "metadata": {},
          "execution_count": 76
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# model no. 4\n",
        "tf.random.set_seed(42)\n",
        "\n",
        "early_stopping = tf.keras.callbacks.EarlyStopping(monitor='loss', patience=20)\n",
        "\n",
        "insurance_model_4 = tf.keras.Sequential([\n",
        "    tf.keras.layers.Dense(100),\n",
        "    tf.keras.layers.Dense(10),\n",
        "    tf.keras.layers.Dense(1)\n",
        "])\n",
        "\n",
        "insurance_model_4.compile(loss = tf.keras.losses.mae,\n",
        "                          optimizer = tf.keras.optimizers.Adam(),\n",
        "                          metrics=[\"mae\"])\n",
        "\n",
        "history = insurance_model_4.fit(X_train_normal, Y_train, epochs = 1000,\n",
        "                               callbacks=[early_stopping])\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "l84Dwms7VBic",
        "outputId": "08ce85a6-d40b-4b41-830f-ef5bec886592"
      },
      "execution_count": 82,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Epoch 1/1000\n",
            "34/34 [==============================] - 2s 2ms/step - loss: 13343.4590 - mae: 13343.4590\n",
            "Epoch 2/1000\n",
            "34/34 [==============================] - 0s 3ms/step - loss: 13334.6152 - mae: 13334.6152\n",
            "Epoch 3/1000\n",
            "34/34 [==============================] - 0s 2ms/step - loss: 13313.0918 - mae: 13313.0918\n",
            "Epoch 4/1000\n",
            "34/34 [==============================] - 0s 2ms/step - loss: 13268.6035 - mae: 13268.6035\n",
            "Epoch 5/1000\n",
            "34/34 [==============================] - 0s 2ms/step - loss: 13190.2607 - mae: 13190.2607\n",
            "Epoch 6/1000\n",
            "34/34 [==============================] - 0s 2ms/step - loss: 13066.9385 - mae: 13066.9385\n",
            "Epoch 7/1000\n",
            "34/34 [==============================] - 0s 2ms/step - loss: 12888.1299 - mae: 12888.1299\n",
            "Epoch 8/1000\n",
            "34/34 [==============================] - 0s 2ms/step - loss: 12643.6562 - mae: 12643.6562\n",
            "Epoch 9/1000\n",
            "34/34 [==============================] - 0s 2ms/step - loss: 12323.3047 - mae: 12323.3047\n",
            "Epoch 10/1000\n",
            "34/34 [==============================] - 0s 2ms/step - loss: 11922.8252 - mae: 11922.8252\n",
            "Epoch 11/1000\n",
            "34/34 [==============================] - 0s 2ms/step - loss: 11450.9180 - mae: 11450.9180\n",
            "Epoch 12/1000\n",
            "34/34 [==============================] - 0s 2ms/step - loss: 10946.7930 - mae: 10946.7930\n",
            "Epoch 13/1000\n",
            "34/34 [==============================] - 0s 2ms/step - loss: 10446.0400 - mae: 10446.0400\n",
            "Epoch 14/1000\n",
            "34/34 [==============================] - 0s 2ms/step - loss: 9950.2412 - mae: 9950.2412\n",
            "Epoch 15/1000\n",
            "34/34 [==============================] - 0s 2ms/step - loss: 9482.2246 - mae: 9482.2246\n",
            "Epoch 16/1000\n",
            "34/34 [==============================] - 0s 2ms/step - loss: 9067.2021 - mae: 9067.2021\n",
            "Epoch 17/1000\n",
            "34/34 [==============================] - 0s 2ms/step - loss: 8722.3633 - mae: 8722.3633\n",
            "Epoch 18/1000\n",
            "34/34 [==============================] - 0s 2ms/step - loss: 8442.8193 - mae: 8442.8193\n",
            "Epoch 19/1000\n",
            "34/34 [==============================] - 0s 2ms/step - loss: 8228.4893 - mae: 8228.4893\n",
            "Epoch 20/1000\n",
            "34/34 [==============================] - 0s 1ms/step - loss: 8080.4722 - mae: 8080.4722\n",
            "Epoch 21/1000\n",
            "34/34 [==============================] - 0s 1ms/step - loss: 7971.7578 - mae: 7971.7578\n",
            "Epoch 22/1000\n",
            "34/34 [==============================] - 0s 1ms/step - loss: 7896.9937 - mae: 7896.9937\n",
            "Epoch 23/1000\n",
            "34/34 [==============================] - 0s 1ms/step - loss: 7837.9492 - mae: 7837.9492\n",
            "Epoch 24/1000\n",
            "34/34 [==============================] - 0s 1ms/step - loss: 7785.5801 - mae: 7785.5801\n",
            "Epoch 25/1000\n",
            "34/34 [==============================] - 0s 1ms/step - loss: 7747.0488 - mae: 7747.0488\n",
            "Epoch 26/1000\n",
            "34/34 [==============================] - 0s 1ms/step - loss: 7695.1958 - mae: 7695.1958\n",
            "Epoch 27/1000\n",
            "34/34 [==============================] - 0s 1ms/step - loss: 7653.0566 - mae: 7653.0566\n",
            "Epoch 28/1000\n",
            "34/34 [==============================] - 0s 1ms/step - loss: 7610.3716 - mae: 7610.3716\n",
            "Epoch 29/1000\n",
            "34/34 [==============================] - 0s 1ms/step - loss: 7567.7192 - mae: 7567.7192\n",
            "Epoch 30/1000\n",
            "34/34 [==============================] - 0s 1ms/step - loss: 7524.0820 - mae: 7524.0820\n",
            "Epoch 31/1000\n",
            "34/34 [==============================] - 0s 1ms/step - loss: 7479.9980 - mae: 7479.9980\n",
            "Epoch 32/1000\n",
            "34/34 [==============================] - 0s 1ms/step - loss: 7435.6465 - mae: 7435.6465\n",
            "Epoch 33/1000\n",
            "34/34 [==============================] - 0s 1ms/step - loss: 7390.9741 - mae: 7390.9741\n",
            "Epoch 34/1000\n",
            "34/34 [==============================] - 0s 1ms/step - loss: 7342.4976 - mae: 7342.4976\n",
            "Epoch 35/1000\n",
            "34/34 [==============================] - 0s 1ms/step - loss: 7295.4404 - mae: 7295.4404\n",
            "Epoch 36/1000\n",
            "34/34 [==============================] - 0s 1ms/step - loss: 7244.9512 - mae: 7244.9512\n",
            "Epoch 37/1000\n",
            "34/34 [==============================] - 0s 1ms/step - loss: 7194.2886 - mae: 7194.2886\n",
            "Epoch 38/1000\n",
            "34/34 [==============================] - 0s 1ms/step - loss: 7142.9404 - mae: 7142.9404\n",
            "Epoch 39/1000\n",
            "34/34 [==============================] - 0s 1ms/step - loss: 7087.7031 - mae: 7087.7031\n",
            "Epoch 40/1000\n",
            "34/34 [==============================] - 0s 1ms/step - loss: 7031.9004 - mae: 7031.9004\n",
            "Epoch 41/1000\n",
            "34/34 [==============================] - 0s 1ms/step - loss: 6975.0679 - mae: 6975.0679\n",
            "Epoch 42/1000\n",
            "34/34 [==============================] - 0s 1ms/step - loss: 6915.7202 - mae: 6915.7202\n",
            "Epoch 43/1000\n",
            "34/34 [==============================] - 0s 1ms/step - loss: 6852.6230 - mae: 6852.6230\n",
            "Epoch 44/1000\n",
            "34/34 [==============================] - 0s 1ms/step - loss: 6785.7866 - mae: 6785.7866\n",
            "Epoch 45/1000\n",
            "34/34 [==============================] - 0s 1ms/step - loss: 6718.1279 - mae: 6718.1279\n",
            "Epoch 46/1000\n",
            "34/34 [==============================] - 0s 1ms/step - loss: 6648.5254 - mae: 6648.5254\n",
            "Epoch 47/1000\n",
            "34/34 [==============================] - 0s 1ms/step - loss: 6576.4863 - mae: 6576.4863\n",
            "Epoch 48/1000\n",
            "34/34 [==============================] - 0s 1ms/step - loss: 6497.5029 - mae: 6497.5029\n",
            "Epoch 49/1000\n",
            "34/34 [==============================] - 0s 1ms/step - loss: 6418.2686 - mae: 6418.2686\n",
            "Epoch 50/1000\n",
            "34/34 [==============================] - 0s 1ms/step - loss: 6331.8833 - mae: 6331.8833\n",
            "Epoch 51/1000\n",
            "34/34 [==============================] - 0s 1ms/step - loss: 6246.6313 - mae: 6246.6313\n",
            "Epoch 52/1000\n",
            "34/34 [==============================] - 0s 1ms/step - loss: 6153.0435 - mae: 6153.0435\n",
            "Epoch 53/1000\n",
            "34/34 [==============================] - 0s 1ms/step - loss: 6056.5063 - mae: 6056.5063\n",
            "Epoch 54/1000\n",
            "34/34 [==============================] - 0s 1ms/step - loss: 5957.2500 - mae: 5957.2500\n",
            "Epoch 55/1000\n",
            "34/34 [==============================] - 0s 1ms/step - loss: 5849.6177 - mae: 5849.6177\n",
            "Epoch 56/1000\n",
            "34/34 [==============================] - 0s 1ms/step - loss: 5740.8564 - mae: 5740.8564\n",
            "Epoch 57/1000\n",
            "34/34 [==============================] - 0s 1ms/step - loss: 5625.6714 - mae: 5625.6714\n",
            "Epoch 58/1000\n",
            "34/34 [==============================] - 0s 1ms/step - loss: 5510.0869 - mae: 5510.0869\n",
            "Epoch 59/1000\n",
            "34/34 [==============================] - 0s 1ms/step - loss: 5391.2656 - mae: 5391.2656\n",
            "Epoch 60/1000\n",
            "34/34 [==============================] - 0s 1ms/step - loss: 5268.8672 - mae: 5268.8672\n",
            "Epoch 61/1000\n",
            "34/34 [==============================] - 0s 1ms/step - loss: 5144.2178 - mae: 5144.2178\n",
            "Epoch 62/1000\n",
            "34/34 [==============================] - 0s 1ms/step - loss: 5014.2446 - mae: 5014.2446\n",
            "Epoch 63/1000\n",
            "34/34 [==============================] - 0s 1ms/step - loss: 4887.1216 - mae: 4887.1216\n",
            "Epoch 64/1000\n",
            "34/34 [==============================] - 0s 1ms/step - loss: 4755.9429 - mae: 4755.9429\n",
            "Epoch 65/1000\n",
            "34/34 [==============================] - 0s 1ms/step - loss: 4631.4727 - mae: 4631.4727\n",
            "Epoch 66/1000\n",
            "34/34 [==============================] - 0s 1ms/step - loss: 4511.4287 - mae: 4511.4287\n",
            "Epoch 67/1000\n",
            "34/34 [==============================] - 0s 1ms/step - loss: 4406.0073 - mae: 4406.0073\n",
            "Epoch 68/1000\n",
            "34/34 [==============================] - 0s 1ms/step - loss: 4301.3330 - mae: 4301.3330\n",
            "Epoch 69/1000\n",
            "34/34 [==============================] - 0s 1ms/step - loss: 4202.1831 - mae: 4202.1831\n",
            "Epoch 70/1000\n",
            "34/34 [==============================] - 0s 1ms/step - loss: 4110.3540 - mae: 4110.3540\n",
            "Epoch 71/1000\n",
            "34/34 [==============================] - 0s 1ms/step - loss: 4024.7070 - mae: 4024.7070\n",
            "Epoch 72/1000\n",
            "34/34 [==============================] - 0s 1ms/step - loss: 3950.3552 - mae: 3950.3552\n",
            "Epoch 73/1000\n",
            "34/34 [==============================] - 0s 1ms/step - loss: 3885.3665 - mae: 3885.3665\n",
            "Epoch 74/1000\n",
            "34/34 [==============================] - 0s 1ms/step - loss: 3831.3406 - mae: 3831.3406\n",
            "Epoch 75/1000\n",
            "34/34 [==============================] - 0s 1ms/step - loss: 3788.4880 - mae: 3788.4880\n",
            "Epoch 76/1000\n",
            "34/34 [==============================] - 0s 1ms/step - loss: 3754.5859 - mae: 3754.5859\n",
            "Epoch 77/1000\n",
            "34/34 [==============================] - 0s 1ms/step - loss: 3727.4033 - mae: 3727.4033\n",
            "Epoch 78/1000\n",
            "34/34 [==============================] - 0s 1ms/step - loss: 3708.8218 - mae: 3708.8218\n",
            "Epoch 79/1000\n",
            "34/34 [==============================] - 0s 1ms/step - loss: 3693.9170 - mae: 3693.9170\n",
            "Epoch 80/1000\n",
            "34/34 [==============================] - 0s 1ms/step - loss: 3683.8376 - mae: 3683.8376\n",
            "Epoch 81/1000\n",
            "34/34 [==============================] - 0s 1ms/step - loss: 3676.0789 - mae: 3676.0789\n",
            "Epoch 82/1000\n",
            "34/34 [==============================] - 0s 1ms/step - loss: 3671.7461 - mae: 3671.7461\n",
            "Epoch 83/1000\n",
            "34/34 [==============================] - 0s 1ms/step - loss: 3665.5889 - mae: 3665.5889\n",
            "Epoch 84/1000\n",
            "34/34 [==============================] - 0s 1ms/step - loss: 3662.3267 - mae: 3662.3267\n",
            "Epoch 85/1000\n",
            "34/34 [==============================] - 0s 1ms/step - loss: 3660.3972 - mae: 3660.3972\n",
            "Epoch 86/1000\n",
            "34/34 [==============================] - 0s 1ms/step - loss: 3657.8379 - mae: 3657.8379\n",
            "Epoch 87/1000\n",
            "34/34 [==============================] - 0s 1ms/step - loss: 3655.0745 - mae: 3655.0745\n",
            "Epoch 88/1000\n",
            "34/34 [==============================] - 0s 1ms/step - loss: 3652.3057 - mae: 3652.3057\n",
            "Epoch 89/1000\n",
            "34/34 [==============================] - 0s 1ms/step - loss: 3650.5405 - mae: 3650.5405\n",
            "Epoch 90/1000\n",
            "34/34 [==============================] - 0s 1ms/step - loss: 3649.0752 - mae: 3649.0752\n",
            "Epoch 91/1000\n",
            "34/34 [==============================] - 0s 1ms/step - loss: 3645.9783 - mae: 3645.9783\n",
            "Epoch 92/1000\n",
            "34/34 [==============================] - 0s 1ms/step - loss: 3645.2842 - mae: 3645.2842\n",
            "Epoch 93/1000\n",
            "34/34 [==============================] - 0s 1ms/step - loss: 3643.0032 - mae: 3643.0032\n",
            "Epoch 94/1000\n",
            "34/34 [==============================] - 0s 1ms/step - loss: 3641.2729 - mae: 3641.2729\n",
            "Epoch 95/1000\n",
            "34/34 [==============================] - 0s 1ms/step - loss: 3642.1968 - mae: 3642.1968\n",
            "Epoch 96/1000\n",
            "34/34 [==============================] - 0s 1ms/step - loss: 3639.1929 - mae: 3639.1929\n",
            "Epoch 97/1000\n",
            "34/34 [==============================] - 0s 2ms/step - loss: 3636.7688 - mae: 3636.7688\n",
            "Epoch 98/1000\n",
            "34/34 [==============================] - 0s 1ms/step - loss: 3634.6636 - mae: 3634.6636\n",
            "Epoch 99/1000\n",
            "34/34 [==============================] - 0s 1ms/step - loss: 3634.0991 - mae: 3634.0991\n",
            "Epoch 100/1000\n",
            "34/34 [==============================] - 0s 1ms/step - loss: 3632.3757 - mae: 3632.3757\n",
            "Epoch 101/1000\n",
            "34/34 [==============================] - 0s 1ms/step - loss: 3629.6841 - mae: 3629.6841\n",
            "Epoch 102/1000\n",
            "34/34 [==============================] - 0s 1ms/step - loss: 3627.1660 - mae: 3627.1660\n",
            "Epoch 103/1000\n",
            "34/34 [==============================] - 0s 1ms/step - loss: 3626.0198 - mae: 3626.0198\n",
            "Epoch 104/1000\n",
            "34/34 [==============================] - 0s 1ms/step - loss: 3623.5776 - mae: 3623.5776\n",
            "Epoch 105/1000\n",
            "34/34 [==============================] - 0s 1ms/step - loss: 3621.8696 - mae: 3621.8696\n",
            "Epoch 106/1000\n",
            "34/34 [==============================] - 0s 1ms/step - loss: 3620.6113 - mae: 3620.6113\n",
            "Epoch 107/1000\n",
            "34/34 [==============================] - 0s 1ms/step - loss: 3619.8555 - mae: 3619.8555\n",
            "Epoch 108/1000\n",
            "34/34 [==============================] - 0s 1ms/step - loss: 3617.5320 - mae: 3617.5320\n",
            "Epoch 109/1000\n",
            "34/34 [==============================] - 0s 1ms/step - loss: 3617.8794 - mae: 3617.8794\n",
            "Epoch 110/1000\n",
            "34/34 [==============================] - 0s 1ms/step - loss: 3614.1824 - mae: 3614.1824\n",
            "Epoch 111/1000\n",
            "34/34 [==============================] - 0s 1ms/step - loss: 3611.5483 - mae: 3611.5483\n",
            "Epoch 112/1000\n",
            "34/34 [==============================] - 0s 1ms/step - loss: 3609.5603 - mae: 3609.5603\n",
            "Epoch 113/1000\n",
            "34/34 [==============================] - 0s 1ms/step - loss: 3608.1094 - mae: 3608.1094\n",
            "Epoch 114/1000\n",
            "34/34 [==============================] - 0s 1ms/step - loss: 3607.1548 - mae: 3607.1548\n",
            "Epoch 115/1000\n",
            "34/34 [==============================] - 0s 2ms/step - loss: 3605.4470 - mae: 3605.4470\n",
            "Epoch 116/1000\n",
            "34/34 [==============================] - 0s 2ms/step - loss: 3603.9580 - mae: 3603.9580\n",
            "Epoch 117/1000\n",
            "34/34 [==============================] - 0s 2ms/step - loss: 3600.8511 - mae: 3600.8511\n",
            "Epoch 118/1000\n",
            "34/34 [==============================] - 0s 2ms/step - loss: 3596.9983 - mae: 3596.9983\n",
            "Epoch 119/1000\n",
            "34/34 [==============================] - 0s 2ms/step - loss: 3598.8438 - mae: 3598.8438\n",
            "Epoch 120/1000\n",
            "34/34 [==============================] - 0s 2ms/step - loss: 3596.4336 - mae: 3596.4336\n",
            "Epoch 121/1000\n",
            "34/34 [==============================] - 0s 2ms/step - loss: 3591.3096 - mae: 3591.3096\n",
            "Epoch 122/1000\n",
            "34/34 [==============================] - 0s 2ms/step - loss: 3590.6033 - mae: 3590.6033\n",
            "Epoch 123/1000\n",
            "34/34 [==============================] - 0s 2ms/step - loss: 3588.7148 - mae: 3588.7148\n",
            "Epoch 124/1000\n",
            "34/34 [==============================] - 0s 2ms/step - loss: 3586.3921 - mae: 3586.3921\n",
            "Epoch 125/1000\n",
            "34/34 [==============================] - 0s 2ms/step - loss: 3584.3774 - mae: 3584.3774\n",
            "Epoch 126/1000\n",
            "34/34 [==============================] - 0s 2ms/step - loss: 3583.2581 - mae: 3583.2581\n",
            "Epoch 127/1000\n",
            "34/34 [==============================] - 0s 2ms/step - loss: 3583.6702 - mae: 3583.6702\n",
            "Epoch 128/1000\n",
            "34/34 [==============================] - 0s 2ms/step - loss: 3580.0129 - mae: 3580.0129\n",
            "Epoch 129/1000\n",
            "34/34 [==============================] - 0s 2ms/step - loss: 3578.5972 - mae: 3578.5972\n",
            "Epoch 130/1000\n",
            "34/34 [==============================] - 0s 2ms/step - loss: 3574.9810 - mae: 3574.9810\n",
            "Epoch 131/1000\n",
            "34/34 [==============================] - 0s 2ms/step - loss: 3573.5505 - mae: 3573.5505\n",
            "Epoch 132/1000\n",
            "34/34 [==============================] - 0s 2ms/step - loss: 3570.6870 - mae: 3570.6870\n",
            "Epoch 133/1000\n",
            "34/34 [==============================] - 0s 2ms/step - loss: 3569.1025 - mae: 3569.1025\n",
            "Epoch 134/1000\n",
            "34/34 [==============================] - 0s 2ms/step - loss: 3567.0359 - mae: 3567.0359\n",
            "Epoch 135/1000\n",
            "34/34 [==============================] - 0s 2ms/step - loss: 3565.1621 - mae: 3565.1621\n",
            "Epoch 136/1000\n",
            "34/34 [==============================] - 0s 2ms/step - loss: 3563.7048 - mae: 3563.7048\n",
            "Epoch 137/1000\n",
            "34/34 [==============================] - 0s 2ms/step - loss: 3562.3909 - mae: 3562.3909\n",
            "Epoch 138/1000\n",
            "34/34 [==============================] - 0s 2ms/step - loss: 3560.0779 - mae: 3560.0779\n",
            "Epoch 139/1000\n",
            "34/34 [==============================] - 0s 2ms/step - loss: 3559.4011 - mae: 3559.4011\n",
            "Epoch 140/1000\n",
            "34/34 [==============================] - 0s 2ms/step - loss: 3557.1746 - mae: 3557.1746\n",
            "Epoch 141/1000\n",
            "34/34 [==============================] - 0s 2ms/step - loss: 3557.3337 - mae: 3557.3337\n",
            "Epoch 142/1000\n",
            "34/34 [==============================] - 0s 2ms/step - loss: 3554.5852 - mae: 3554.5852\n",
            "Epoch 143/1000\n",
            "34/34 [==============================] - 0s 2ms/step - loss: 3554.8284 - mae: 3554.8284\n",
            "Epoch 144/1000\n",
            "34/34 [==============================] - 0s 2ms/step - loss: 3551.8901 - mae: 3551.8901\n",
            "Epoch 145/1000\n",
            "34/34 [==============================] - 0s 2ms/step - loss: 3550.1545 - mae: 3550.1545\n",
            "Epoch 146/1000\n",
            "34/34 [==============================] - 0s 2ms/step - loss: 3550.2830 - mae: 3550.2830\n",
            "Epoch 147/1000\n",
            "34/34 [==============================] - 0s 1ms/step - loss: 3547.9651 - mae: 3547.9651\n",
            "Epoch 148/1000\n",
            "34/34 [==============================] - 0s 1ms/step - loss: 3546.4949 - mae: 3546.4949\n",
            "Epoch 149/1000\n",
            "34/34 [==============================] - 0s 1ms/step - loss: 3543.7305 - mae: 3543.7305\n",
            "Epoch 150/1000\n",
            "34/34 [==============================] - 0s 1ms/step - loss: 3543.7078 - mae: 3543.7078\n",
            "Epoch 151/1000\n",
            "34/34 [==============================] - 0s 1ms/step - loss: 3541.7415 - mae: 3541.7415\n",
            "Epoch 152/1000\n",
            "34/34 [==============================] - 0s 1ms/step - loss: 3540.0303 - mae: 3540.0303\n",
            "Epoch 153/1000\n",
            "34/34 [==============================] - 0s 1ms/step - loss: 3538.5354 - mae: 3538.5354\n",
            "Epoch 154/1000\n",
            "34/34 [==============================] - 0s 1ms/step - loss: 3539.9299 - mae: 3539.9299\n",
            "Epoch 155/1000\n",
            "34/34 [==============================] - 0s 1ms/step - loss: 3537.4817 - mae: 3537.4817\n",
            "Epoch 156/1000\n",
            "34/34 [==============================] - 0s 1ms/step - loss: 3535.6099 - mae: 3535.6099\n",
            "Epoch 157/1000\n",
            "34/34 [==============================] - 0s 1ms/step - loss: 3534.1882 - mae: 3534.1882\n",
            "Epoch 158/1000\n",
            "34/34 [==============================] - 0s 1ms/step - loss: 3531.1287 - mae: 3531.1287\n",
            "Epoch 159/1000\n",
            "34/34 [==============================] - 0s 1ms/step - loss: 3529.5850 - mae: 3529.5850\n",
            "Epoch 160/1000\n",
            "34/34 [==============================] - 0s 1ms/step - loss: 3529.2751 - mae: 3529.2751\n",
            "Epoch 161/1000\n",
            "34/34 [==============================] - 0s 1ms/step - loss: 3526.2605 - mae: 3526.2605\n",
            "Epoch 162/1000\n",
            "34/34 [==============================] - 0s 1ms/step - loss: 3525.6047 - mae: 3525.6047\n",
            "Epoch 163/1000\n",
            "34/34 [==============================] - 0s 1ms/step - loss: 3524.1292 - mae: 3524.1292\n",
            "Epoch 164/1000\n",
            "34/34 [==============================] - 0s 1ms/step - loss: 3523.6086 - mae: 3523.6086\n",
            "Epoch 165/1000\n",
            "34/34 [==============================] - 0s 1ms/step - loss: 3521.6101 - mae: 3521.6101\n",
            "Epoch 166/1000\n",
            "34/34 [==============================] - 0s 1ms/step - loss: 3520.0044 - mae: 3520.0044\n",
            "Epoch 167/1000\n",
            "34/34 [==============================] - 0s 1ms/step - loss: 3518.9294 - mae: 3518.9294\n",
            "Epoch 168/1000\n",
            "34/34 [==============================] - 0s 1ms/step - loss: 3517.5310 - mae: 3517.5310\n",
            "Epoch 169/1000\n",
            "34/34 [==============================] - 0s 1ms/step - loss: 3516.4216 - mae: 3516.4216\n",
            "Epoch 170/1000\n",
            "34/34 [==============================] - 0s 1ms/step - loss: 3515.2307 - mae: 3515.2307\n",
            "Epoch 171/1000\n",
            "34/34 [==============================] - 0s 1ms/step - loss: 3514.6875 - mae: 3514.6875\n",
            "Epoch 172/1000\n",
            "34/34 [==============================] - 0s 1ms/step - loss: 3513.0728 - mae: 3513.0728\n",
            "Epoch 173/1000\n",
            "34/34 [==============================] - 0s 1ms/step - loss: 3511.8174 - mae: 3511.8174\n",
            "Epoch 174/1000\n",
            "34/34 [==============================] - 0s 1ms/step - loss: 3510.6187 - mae: 3510.6187\n",
            "Epoch 175/1000\n",
            "34/34 [==============================] - 0s 1ms/step - loss: 3509.3845 - mae: 3509.3845\n",
            "Epoch 176/1000\n",
            "34/34 [==============================] - 0s 1ms/step - loss: 3509.3608 - mae: 3509.3608\n",
            "Epoch 177/1000\n",
            "34/34 [==============================] - 0s 1ms/step - loss: 3509.5337 - mae: 3509.5337\n",
            "Epoch 178/1000\n",
            "34/34 [==============================] - 0s 1ms/step - loss: 3506.9822 - mae: 3506.9822\n",
            "Epoch 179/1000\n",
            "34/34 [==============================] - 0s 1ms/step - loss: 3509.2749 - mae: 3509.2749\n",
            "Epoch 180/1000\n",
            "34/34 [==============================] - 0s 1ms/step - loss: 3504.0420 - mae: 3504.0420\n",
            "Epoch 181/1000\n",
            "34/34 [==============================] - 0s 1ms/step - loss: 3501.9541 - mae: 3501.9541\n",
            "Epoch 182/1000\n",
            "34/34 [==============================] - 0s 1ms/step - loss: 3501.3567 - mae: 3501.3567\n",
            "Epoch 183/1000\n",
            "34/34 [==============================] - 0s 1ms/step - loss: 3499.5217 - mae: 3499.5217\n",
            "Epoch 184/1000\n",
            "34/34 [==============================] - 0s 1ms/step - loss: 3498.7332 - mae: 3498.7332\n",
            "Epoch 185/1000\n",
            "34/34 [==============================] - 0s 1ms/step - loss: 3498.3743 - mae: 3498.3743\n",
            "Epoch 186/1000\n",
            "34/34 [==============================] - 0s 1ms/step - loss: 3495.7764 - mae: 3495.7764\n",
            "Epoch 187/1000\n",
            "34/34 [==============================] - 0s 1ms/step - loss: 3496.4653 - mae: 3496.4653\n",
            "Epoch 188/1000\n",
            "34/34 [==============================] - 0s 2ms/step - loss: 3493.2405 - mae: 3493.2405\n",
            "Epoch 189/1000\n",
            "34/34 [==============================] - 0s 1ms/step - loss: 3491.6458 - mae: 3491.6458\n",
            "Epoch 190/1000\n",
            "34/34 [==============================] - 0s 1ms/step - loss: 3493.5789 - mae: 3493.5789\n",
            "Epoch 191/1000\n",
            "34/34 [==============================] - 0s 1ms/step - loss: 3498.6628 - mae: 3498.6628\n",
            "Epoch 192/1000\n",
            "34/34 [==============================] - 0s 1ms/step - loss: 3488.7266 - mae: 3488.7266\n",
            "Epoch 193/1000\n",
            "34/34 [==============================] - 0s 1ms/step - loss: 3488.6160 - mae: 3488.6160\n",
            "Epoch 194/1000\n",
            "34/34 [==============================] - 0s 1ms/step - loss: 3485.6152 - mae: 3485.6152\n",
            "Epoch 195/1000\n",
            "34/34 [==============================] - 0s 1ms/step - loss: 3484.9185 - mae: 3484.9185\n",
            "Epoch 196/1000\n",
            "34/34 [==============================] - 0s 1ms/step - loss: 3486.0466 - mae: 3486.0466\n",
            "Epoch 197/1000\n",
            "34/34 [==============================] - 0s 1ms/step - loss: 3482.8096 - mae: 3482.8096\n",
            "Epoch 198/1000\n",
            "34/34 [==============================] - 0s 1ms/step - loss: 3481.4062 - mae: 3481.4062\n",
            "Epoch 199/1000\n",
            "34/34 [==============================] - 0s 1ms/step - loss: 3480.1926 - mae: 3480.1926\n",
            "Epoch 200/1000\n",
            "34/34 [==============================] - 0s 1ms/step - loss: 3480.7729 - mae: 3480.7729\n",
            "Epoch 201/1000\n",
            "34/34 [==============================] - 0s 1ms/step - loss: 3476.8694 - mae: 3476.8694\n",
            "Epoch 202/1000\n",
            "34/34 [==============================] - 0s 1ms/step - loss: 3476.8015 - mae: 3476.8015\n",
            "Epoch 203/1000\n",
            "34/34 [==============================] - 0s 1ms/step - loss: 3475.0105 - mae: 3475.0105\n",
            "Epoch 204/1000\n",
            "34/34 [==============================] - 0s 1ms/step - loss: 3476.6223 - mae: 3476.6223\n",
            "Epoch 205/1000\n",
            "34/34 [==============================] - 0s 1ms/step - loss: 3474.0344 - mae: 3474.0344\n",
            "Epoch 206/1000\n",
            "34/34 [==============================] - 0s 2ms/step - loss: 3473.4958 - mae: 3473.4958\n",
            "Epoch 207/1000\n",
            "34/34 [==============================] - 0s 1ms/step - loss: 3474.3127 - mae: 3474.3127\n",
            "Epoch 208/1000\n",
            "34/34 [==============================] - 0s 1ms/step - loss: 3473.5713 - mae: 3473.5713\n",
            "Epoch 209/1000\n",
            "34/34 [==============================] - 0s 1ms/step - loss: 3473.7793 - mae: 3473.7793\n",
            "Epoch 210/1000\n",
            "34/34 [==============================] - 0s 1ms/step - loss: 3473.0493 - mae: 3473.0493\n",
            "Epoch 211/1000\n",
            "34/34 [==============================] - 0s 1ms/step - loss: 3472.6770 - mae: 3472.6770\n",
            "Epoch 212/1000\n",
            "34/34 [==============================] - 0s 1ms/step - loss: 3472.9722 - mae: 3472.9722\n",
            "Epoch 213/1000\n",
            "34/34 [==============================] - 0s 1ms/step - loss: 3472.3931 - mae: 3472.3931\n",
            "Epoch 214/1000\n",
            "34/34 [==============================] - 0s 1ms/step - loss: 3474.2900 - mae: 3474.2900\n",
            "Epoch 215/1000\n",
            "34/34 [==============================] - 0s 1ms/step - loss: 3473.3186 - mae: 3473.3186\n",
            "Epoch 216/1000\n",
            "34/34 [==============================] - 0s 1ms/step - loss: 3472.6421 - mae: 3472.6421\n",
            "Epoch 217/1000\n",
            "34/34 [==============================] - 0s 1ms/step - loss: 3474.9036 - mae: 3474.9036\n",
            "Epoch 218/1000\n",
            "34/34 [==============================] - 0s 1ms/step - loss: 3472.1409 - mae: 3472.1409\n",
            "Epoch 219/1000\n",
            "34/34 [==============================] - 0s 1ms/step - loss: 3472.4832 - mae: 3472.4832\n",
            "Epoch 220/1000\n",
            "34/34 [==============================] - 0s 1ms/step - loss: 3471.6973 - mae: 3471.6973\n",
            "Epoch 221/1000\n",
            "34/34 [==============================] - 0s 1ms/step - loss: 3474.2593 - mae: 3474.2593\n",
            "Epoch 222/1000\n",
            "34/34 [==============================] - 0s 1ms/step - loss: 3473.2871 - mae: 3473.2871\n",
            "Epoch 223/1000\n",
            "34/34 [==============================] - 0s 1ms/step - loss: 3472.8413 - mae: 3472.8413\n",
            "Epoch 224/1000\n",
            "34/34 [==============================] - 0s 1ms/step - loss: 3473.1680 - mae: 3473.1680\n",
            "Epoch 225/1000\n",
            "34/34 [==============================] - 0s 1ms/step - loss: 3472.9121 - mae: 3472.9121\n",
            "Epoch 226/1000\n",
            "34/34 [==============================] - 0s 1ms/step - loss: 3471.7566 - mae: 3471.7566\n",
            "Epoch 227/1000\n",
            "34/34 [==============================] - 0s 1ms/step - loss: 3471.4871 - mae: 3471.4871\n",
            "Epoch 228/1000\n",
            "34/34 [==============================] - 0s 1ms/step - loss: 3473.3994 - mae: 3473.3994\n",
            "Epoch 229/1000\n",
            "34/34 [==============================] - 0s 1ms/step - loss: 3472.0945 - mae: 3472.0945\n",
            "Epoch 230/1000\n",
            "34/34 [==============================] - 0s 1ms/step - loss: 3473.9968 - mae: 3473.9968\n",
            "Epoch 231/1000\n",
            "34/34 [==============================] - 0s 1ms/step - loss: 3471.8401 - mae: 3471.8401\n",
            "Epoch 232/1000\n",
            "34/34 [==============================] - 0s 1ms/step - loss: 3472.7146 - mae: 3472.7146\n",
            "Epoch 233/1000\n",
            "34/34 [==============================] - 0s 1ms/step - loss: 3472.2275 - mae: 3472.2275\n",
            "Epoch 234/1000\n",
            "34/34 [==============================] - 0s 1ms/step - loss: 3472.5151 - mae: 3472.5151\n",
            "Epoch 235/1000\n",
            "34/34 [==============================] - 0s 2ms/step - loss: 3474.0020 - mae: 3474.0020\n",
            "Epoch 236/1000\n",
            "34/34 [==============================] - 0s 1ms/step - loss: 3473.5320 - mae: 3473.5320\n",
            "Epoch 237/1000\n",
            "34/34 [==============================] - 0s 1ms/step - loss: 3472.9202 - mae: 3472.9202\n",
            "Epoch 238/1000\n",
            "34/34 [==============================] - 0s 1ms/step - loss: 3473.5583 - mae: 3473.5583\n",
            "Epoch 239/1000\n",
            "34/34 [==============================] - 0s 1ms/step - loss: 3474.4971 - mae: 3474.4971\n",
            "Epoch 240/1000\n",
            "34/34 [==============================] - 0s 1ms/step - loss: 3472.5295 - mae: 3472.5295\n",
            "Epoch 241/1000\n",
            "34/34 [==============================] - 0s 1ms/step - loss: 3471.6340 - mae: 3471.6340\n",
            "Epoch 242/1000\n",
            "34/34 [==============================] - 0s 1ms/step - loss: 3474.0242 - mae: 3474.0242\n",
            "Epoch 243/1000\n",
            "34/34 [==============================] - 0s 1ms/step - loss: 3472.5332 - mae: 3472.5332\n",
            "Epoch 244/1000\n",
            "34/34 [==============================] - 0s 1ms/step - loss: 3473.6833 - mae: 3473.6833\n",
            "Epoch 245/1000\n",
            "34/34 [==============================] - 0s 1ms/step - loss: 3471.9873 - mae: 3471.9873\n",
            "Epoch 246/1000\n",
            "34/34 [==============================] - 0s 1ms/step - loss: 3473.3918 - mae: 3473.3918\n",
            "Epoch 247/1000\n",
            "34/34 [==============================] - 0s 1ms/step - loss: 3472.4551 - mae: 3472.4551\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Plot history (also known as a loss curve or a training curve)\n",
        "pd.DataFrame(history.history).plot()\n",
        "plt.ylabel(\"loss\")\n",
        "plt.xlabel(\"epochs\")"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 466
        },
        "id": "XLdgDA56VpWV",
        "outputId": "c63d170d-0055-41d7-dfba-09438264fef6"
      },
      "execution_count": 83,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "Text(0.5, 0, 'epochs')"
            ]
          },
          "metadata": {},
          "execution_count": 83
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [],
      "metadata": {
        "id": "dwb_JQLEV8xd"
      },
      "execution_count": null,
      "outputs": []
    }
  ]
}